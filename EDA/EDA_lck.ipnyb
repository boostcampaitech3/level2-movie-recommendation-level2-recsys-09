{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "9b61f1d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import os\n",
    "import pprint\n",
    "import datetime\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4ee89df5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['genres.tsv',\n",
      " 'directors.tsv',\n",
      " 'train_ratings.csv',\n",
      " 'titles.tsv',\n",
      " 'years.tsv',\n",
      " 'Ml_item2attributes.json',\n",
      " 'writers.tsv',\n",
      " '.ipynb_checkpoints',\n",
      " 'EDA.ipynb']\n"
     ]
    }
   ],
   "source": [
    "root_dir = '/opt/ml/input/data/train/'\n",
    "files = os.listdir(root_dir)\n",
    "pprint.pprint(files)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17433fef",
   "metadata": {},
   "source": [
    "# Files"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ff9a740",
   "metadata": {},
   "source": [
    "## File load"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e6e4314b",
   "metadata": {},
   "outputs": [],
   "source": [
    "genres = pd.read_csv(os.path.join(root_dir,'genres.tsv'), sep='\\t')\n",
    "directors = pd.read_csv(os.path.join(root_dir,'directors.tsv'), sep='\\t')\n",
    "titles = pd.read_csv(os.path.join(root_dir,'titles.tsv'), sep='\\t')\n",
    "years = pd.read_csv(os.path.join(root_dir,'years.tsv'), sep='\\t')\n",
    "writers = pd.read_csv(os.path.join(root_dir,'writers.tsv'), sep='\\t')\n",
    "ratings = pd.read_csv(os.path.join(root_dir,'train_ratings.csv'))\n",
    "file_list = [genres, directors, titles, years, writers, ratings]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fe9082f",
   "metadata": {},
   "source": [
    "- 결측치 없음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "520fab58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0\n",
      "0 0\n",
      "0 0\n",
      "0 0\n",
      "0 0\n",
      "0 0 0\n"
     ]
    }
   ],
   "source": [
    "for file in file_list:\n",
    "    print(*file.isnull().sum().values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daff1acc",
   "metadata": {},
   "source": [
    "## Genres"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23dd5b80",
   "metadata": {},
   "source": [
    "- dtype: obejct\n",
    "- 15933개"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "781fa89f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item</th>\n",
       "      <th>genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>318</td>\n",
       "      <td>Crime</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>318</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2571</td>\n",
       "      <td>Action</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item   genre\n",
       "0   318   Crime\n",
       "1   318   Drama\n",
       "2  2571  Action"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "genres.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5e8feaeb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 15933 entries, 0 to 15932\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   item    15933 non-null  int64 \n",
      " 1   genre   15933 non-null  object\n",
      "dtypes: int64(1), object(1)\n",
      "memory usage: 249.1+ KB\n"
     ]
    }
   ],
   "source": [
    "genres.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "625be5da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "item     6807\n",
       "genre      18\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "genres.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0b58b1e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1368x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(19,7))\n",
    "ax = sns.countplot(data=genres,\n",
    "                   x='genre',\n",
    "                   order=genres['genre'].value_counts().index)\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00c77fc0",
   "metadata": {},
   "source": [
    "## Directors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b121aec7",
   "metadata": {},
   "source": [
    "- 감독 1340명\n",
    "- 영화 5503개. 전체 영화 개수보다 적음\n",
    "- 한 영화에 감독이 14명인 경우도 있음(item 50912)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b39aa4f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item</th>\n",
       "      <th>director</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1237</td>\n",
       "      <td>nm0000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5147</td>\n",
       "      <td>nm0000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7327</td>\n",
       "      <td>nm0000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2068</td>\n",
       "      <td>nm0000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7396</td>\n",
       "      <td>nm0000005</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item   director\n",
       "0  1237  nm0000005\n",
       "1  5147  nm0000005\n",
       "2  7327  nm0000005\n",
       "3  2068  nm0000005\n",
       "4  7396  nm0000005"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "directors.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "bf78c157",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5905 entries, 0 to 5904\n",
      "Data columns (total 2 columns):\n",
      " #   Column    Non-Null Count  Dtype \n",
      "---  ------    --------------  ----- \n",
      " 0   item      5905 non-null   int64 \n",
      " 1   director  5905 non-null   object\n",
      "dtypes: int64(1), object(1)\n",
      "memory usage: 92.4+ KB\n"
     ]
    }
   ],
   "source": [
    "directors.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bb82aef2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5503"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "directors['item'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "76ab2833",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nm0000095    44\n",
       "nm0000033    33\n",
       "nm0000142    31\n",
       "nm0000229    29\n",
       "nm0000217    26\n",
       "             ..\n",
       "nm0404606     2\n",
       "nm0405605     2\n",
       "nm0410139     2\n",
       "nm0410769     2\n",
       "nm9054338     2\n",
       "Name: director, Length: 1340, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "directors['director'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bd8e9411",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item</th>\n",
       "      <th>director</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0000127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1074</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0000801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1281</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0001053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1298</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0001054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0001814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2893</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0149446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2932</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0158984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2979</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0170043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3026</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0190859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3938</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0481418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4471</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0622112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4642</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0668247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4929</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0758574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5315</th>\n",
       "      <td>50912</td>\n",
       "      <td>nm0878756</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       item   director\n",
       "239   50912  nm0000127\n",
       "1074  50912  nm0000801\n",
       "1281  50912  nm0001053\n",
       "1298  50912  nm0001054\n",
       "2013  50912  nm0001814\n",
       "2893  50912  nm0149446\n",
       "2932  50912  nm0158984\n",
       "2979  50912  nm0170043\n",
       "3026  50912  nm0190859\n",
       "3938  50912  nm0481418\n",
       "4471  50912  nm0622112\n",
       "4642  50912  nm0668247\n",
       "4929  50912  nm0758574\n",
       "5315  50912  nm0878756"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "directors[directors['item']==50912]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "110c63ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50912    14\n",
       "1282     10\n",
       "27002     8\n",
       "7502      7\n",
       "596       7\n",
       "         ..\n",
       "163       1\n",
       "70        1\n",
       "6566      1\n",
       "5504      1\n",
       "55768     1\n",
       "Name: item, Length: 5503, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "directors['item'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1683cd66",
   "metadata": {},
   "source": [
    "## Titles"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6e8e64e",
   "metadata": {},
   "source": [
    "- War of the Worlds (2005) 두 번 들어가 있음(item 34048, 64997)\n",
    "- nunique: 6806"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cd1c15d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>318</td>\n",
       "      <td>Shawshank Redemption, The (1994)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2571</td>\n",
       "      <td>Matrix, The (1999)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2959</td>\n",
       "      <td>Fight Club (1999)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>296</td>\n",
       "      <td>Pulp Fiction (1994)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>356</td>\n",
       "      <td>Forrest Gump (1994)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item                             title\n",
       "0   318  Shawshank Redemption, The (1994)\n",
       "1  2571                Matrix, The (1999)\n",
       "2  2959                 Fight Club (1999)\n",
       "3   296               Pulp Fiction (1994)\n",
       "4   356               Forrest Gump (1994)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titles.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "192d8be2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6807 entries, 0 to 6806\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   item    6807 non-null   int64 \n",
      " 1   title   6807 non-null   object\n",
      "dtypes: int64(1), object(1)\n",
      "memory usage: 106.5+ KB\n"
     ]
    }
   ],
   "source": [
    "titles.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7d99315e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "War of the Worlds (2005)                     2\n",
       "Shawshank Redemption, The (1994)             1\n",
       "Jay and Silent Bob Strike Back (2001)        1\n",
       "Naked Gun 33 1/3: The Final Insult (1994)    1\n",
       "Quantum of Solace (2008)                     1\n",
       "                                            ..\n",
       "Brigadoon (1954)                             1\n",
       "Son, The (Le fils) (2002)                    1\n",
       "Secret Life of Walter Mitty, The (1947)      1\n",
       "Them! (1954)                                 1\n",
       "Girl Next Door, The (1999)                   1\n",
       "Name: title, Length: 6806, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titles['title'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d8b8cba5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6806"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titles['title'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "70ddc078",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>349</th>\n",
       "      <td>34048</td>\n",
       "      <td>War of the Worlds (2005)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1926</th>\n",
       "      <td>64997</td>\n",
       "      <td>War of the Worlds (2005)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       item                     title\n",
       "349   34048  War of the Worlds (2005)\n",
       "1926  64997  War of the Worlds (2005)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titles[titles['title'] == 'War of the Worlds (2005)']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aaf0fbf6",
   "metadata": {},
   "source": [
    "## Years"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d96199e2",
   "metadata": {},
   "source": [
    "- 데이터 6799개. 영화 제목 보다 7개 적음\n",
    "- 1922 ~ 2014년 데이터\n",
    "- 옛날 영화 비중이 적음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a15a1310",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1348</td>\n",
       "      <td>1922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44587</td>\n",
       "      <td>1922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4768</td>\n",
       "      <td>1922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8235</td>\n",
       "      <td>1923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8609</td>\n",
       "      <td>1923</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    item  year\n",
       "0   1348  1922\n",
       "1  44587  1922\n",
       "2   4768  1922\n",
       "3   8235  1923\n",
       "4   8609  1923"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "years.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "ce619ee2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6799 entries, 0 to 6798\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype\n",
      "---  ------  --------------  -----\n",
      " 0   item    6799 non-null   int64\n",
      " 1   year    6799 non-null   int64\n",
      "dtypes: int64(2)\n",
      "memory usage: 106.4 KB\n"
     ]
    }
   ],
   "source": [
    "years.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "8a63747e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1348      1\n",
       "8644      1\n",
       "31359     1\n",
       "33603     1\n",
       "32022     1\n",
       "         ..\n",
       "1611      1\n",
       "3044      1\n",
       "6721      1\n",
       "1176      1\n",
       "109850    1\n",
       "Name: item, Length: 6799, dtype: int64"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "years['item'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "32fae46d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x1296 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(7,18))\n",
    "ax = sns.countplot(data=years,\n",
    "                   y='year')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e64e78c",
   "metadata": {},
   "source": [
    "## Writers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d94f5328",
   "metadata": {},
   "source": [
    "- 작가 2989명\n",
    "- item 5648개. 전체 영화 개수는 6806개\n",
    "- 영화 하나에 작가 24명있는 영화도 있음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0b74b16b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item</th>\n",
       "      <th>writer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1237</td>\n",
       "      <td>nm0000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5147</td>\n",
       "      <td>nm0000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7327</td>\n",
       "      <td>nm0000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2068</td>\n",
       "      <td>nm0000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7396</td>\n",
       "      <td>nm0000005</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item     writer\n",
       "0  1237  nm0000005\n",
       "1  5147  nm0000005\n",
       "2  7327  nm0000005\n",
       "3  2068  nm0000005\n",
       "4  7396  nm0000005"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "writers.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "4c0b7605",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 11306 entries, 0 to 11305\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   item    11306 non-null  int64 \n",
      " 1   writer  11306 non-null  object\n",
      "dtypes: int64(1), object(1)\n",
      "memory usage: 176.8+ KB\n"
     ]
    }
   ],
   "source": [
    "writers.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fdfbea7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "item      5648\n",
       "writer    2989\n",
       "dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "writers.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "29c0065d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1907     24\n",
       "783      23\n",
       "364      21\n",
       "2687     21\n",
       "48322    19\n",
       "         ..\n",
       "79073     1\n",
       "176       1\n",
       "2560      1\n",
       "42007     1\n",
       "1237      1\n",
       "Name: item, Length: 5648, dtype: int64"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "writers['item'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e08e985",
   "metadata": {},
   "source": [
    "## Train ratings"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e05f4a08",
   "metadata": {},
   "source": [
    "- implicit feedback\n",
    "- 데이터 5,154,471개\n",
    "- 'user'가 'time'에 영화 'item'을 봄\n",
    "- time은 unix time stamp. 1970년 1월 1일로부터 몇 초 지났는지. https://www.unixtimestamp.com/\n",
    "- 2005년 4월 11일 ~ 2015년 3월 31일까지의 데이터\n",
    "- 영화를 보고 긍정적, 부정적 피드백 여부는 알 수 없음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "af1a5fc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user</th>\n",
       "      <th>item</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2397716</th>\n",
       "      <td>63728</td>\n",
       "      <td>904</td>\n",
       "      <td>1323151762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890642</th>\n",
       "      <td>23571</td>\n",
       "      <td>1968</td>\n",
       "      <td>1286200912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1450261</th>\n",
       "      <td>38260</td>\n",
       "      <td>3072</td>\n",
       "      <td>1135187200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4293908</th>\n",
       "      <td>114758</td>\n",
       "      <td>5666</td>\n",
       "      <td>1115583418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3044017</th>\n",
       "      <td>81186</td>\n",
       "      <td>57274</td>\n",
       "      <td>1253390516</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           user   item        time\n",
       "2397716   63728    904  1323151762\n",
       "890642    23571   1968  1286200912\n",
       "1450261   38260   3072  1135187200\n",
       "4293908  114758   5666  1115583418\n",
       "3044017   81186  57274  1253390516"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "1f2349d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5154471 entries, 0 to 5154470\n",
      "Data columns (total 3 columns):\n",
      " #   Column  Dtype\n",
      "---  ------  -----\n",
      " 0   user    int64\n",
      " 1   item    int64\n",
      " 2   time    int64\n",
      "dtypes: int64(3)\n",
      "memory usage: 118.0 MB\n"
     ]
    }
   ],
   "source": [
    "ratings.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "80f56176",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4708943    1113220585\n",
       "2384811    1113220936\n",
       "2384812    1113220975\n",
       "2120237    1113221625\n",
       "2031959    1113222004\n",
       "              ...    \n",
       "2180308    1427780663\n",
       "2180309    1427780680\n",
       "2180310    1427781001\n",
       "2180311    1427781048\n",
       "2180312    1427781052\n",
       "Name: time, Length: 5154471, dtype: int64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings['time'].sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "e12557d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_unixtime(unixtime):\n",
    "    '''\n",
    "    https://potensj.tistory.com/72\n",
    "    '''\n",
    "    date = datetime.datetime.fromtimestamp(unixtime).strftime('%Y-%m-%d %H:%M:%S')\n",
    "    return date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "12115822",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2015-03-31 05:50:01'"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "convert_unixtime(1427781001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "6fa7ceb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings['date'] = ratings['time'].apply(convert_unixtime)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "22c907cc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4708943    2005-04-11 11:56:25\n",
       "2384811    2005-04-11 12:02:16\n",
       "2384812    2005-04-11 12:02:55\n",
       "2120237    2005-04-11 12:13:45\n",
       "2031959    2005-04-11 12:20:04\n",
       "                  ...         \n",
       "2180308    2015-03-31 05:44:23\n",
       "2180309    2015-03-31 05:44:40\n",
       "2180310    2015-03-31 05:50:01\n",
       "2180311    2015-03-31 05:50:48\n",
       "2180312    2015-03-31 05:50:52\n",
       "Name: date, Length: 5154471, dtype: object"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings['date'].sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c8e16f2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
